/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ServicesRouteImport } from './routes/services'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsProjectsRouteImport } from './routes/projects/projects'
import { Route as ProjectsProjectDetailRouteImport } from './routes/projects/$projectDetail'

const ServicesRoute = ServicesRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => rootRouteImport,
} as any)
const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectsRoute = ProjectsProjectsRouteImport.update({
  id: '/projects/projects',
  path: '/projects/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectDetailRoute = ProjectsProjectDetailRouteImport.update({
  id: '/projects/$projectDetail',
  path: '/projects/$projectDetail',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/pricing': typeof PricingRoute
  '/services': typeof ServicesRoute
  '/projects/$projectDetail': typeof ProjectsProjectDetailRoute
  '/projects/projects': typeof ProjectsProjectsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/pricing': typeof PricingRoute
  '/services': typeof ServicesRoute
  '/projects/$projectDetail': typeof ProjectsProjectDetailRoute
  '/projects/projects': typeof ProjectsProjectsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/pricing': typeof PricingRoute
  '/services': typeof ServicesRoute
  '/projects/$projectDetail': typeof ProjectsProjectDetailRoute
  '/projects/projects': typeof ProjectsProjectsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/contact'
    | '/pricing'
    | '/services'
    | '/projects/$projectDetail'
    | '/projects/projects'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contact'
    | '/pricing'
    | '/services'
    | '/projects/$projectDetail'
    | '/projects/projects'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contact'
    | '/pricing'
    | '/services'
    | '/projects/$projectDetail'
    | '/projects/projects'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
  PricingRoute: typeof PricingRoute
  ServicesRoute: typeof ServicesRoute
  ProjectsProjectDetailRoute: typeof ProjectsProjectDetailRoute
  ProjectsProjectsRoute: typeof ProjectsProjectsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/services': {
      id: '/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/projects': {
      id: '/projects/projects'
      path: '/projects/projects'
      fullPath: '/projects/projects'
      preLoaderRoute: typeof ProjectsProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectDetail': {
      id: '/projects/$projectDetail'
      path: '/projects/$projectDetail'
      fullPath: '/projects/$projectDetail'
      preLoaderRoute: typeof ProjectsProjectDetailRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  PricingRoute: PricingRoute,
  ServicesRoute: ServicesRoute,
  ProjectsProjectDetailRoute: ProjectsProjectDetailRoute,
  ProjectsProjectsRoute: ProjectsProjectsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
